<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;
using EFTracingProvider;
using EFProviderWrapperToolkit;
using NGnono.Framework.Data.EF;
using <#= code.EscapeNamespace(efHost.MappingNamespace) #>;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
	    private static readonly NGnono.Framework.Logger.ILog _log;

        static <#= efHost.EntityContainer.Name #>()
        {
            Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
			_log = NGnono.Framework.ServiceLocation.ServiceLocator.Current.Resolve<NGnono.Framework.Logger.ILog>();
        }

		/// <summary>
        /// product ,no tracing
        /// </summary>
        public <#= efHost.EntityContainer.Name #>()
            : this("Name=<#= efHost.EntityContainer.Name #>" , true)
        {
        }

		/// <summary>
        /// product ,no tracing
        /// </summary>
        /// <param name="nameOrConnectionString"></param>
        /// <param name="product"></param>
        public <#= efHost.EntityContainer.Name #>(string nameOrConnectionString, bool product)
            : base(nameOrConnectionString)
        {
        }

		#region ef tracing

        public <#= efHost.EntityContainer.Name #>(string nameOrConnectionString)
            : base(NGnono.Framework.Data.EF.EFTracingUtil.GetConnection(nameOrConnectionString), true)
        {
			var ctx = ((IObjectContextAdapter)this).ObjectContext;

            this.ObjectContext = ctx;

            EFTracingConnection tracingConnection;
            if (ObjectContext.TryUnwrapConnection(out tracingConnection))
            {
                ctx.GetTracingConnection().CommandExecuting += (s, e) => _log.Debug(e.ToTraceString());
            }
        }

        #endregion

		#region Tracing Extensions

        private ObjectContext ObjectContext { get; set; }

        private EFTracingConnection TracingConnection
        {
            get { return ObjectContext.UnwrapConnection<EFTracingConnection>(); }
        }

        public event EventHandler<CommandExecutionEventArgs> CommandExecuting
        {
            add { this.TracingConnection.CommandExecuting += value; }
            remove { this.TracingConnection.CommandExecuting -= value; }
        }

        public event EventHandler<CommandExecutionEventArgs> CommandFinished
        {
            add { this.TracingConnection.CommandFinished += value; }
            remove { this.TracingConnection.CommandFinished -= value; }
        }

        public event EventHandler<CommandExecutionEventArgs> CommandFailed
        {
            add { this.TracingConnection.CommandFailed += value; }
            remove { this.TracingConnection.CommandFailed -= value; }
        }

        #endregion


<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
        public DbSet<<#= set.ElementType.Name #>Entity> <#= set.Name #>Entity { get; set; }
<#
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
		            // modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(new <#= set.ElementType.Name #>EntityMap());
<#
    }
#>
        }
    }
}
