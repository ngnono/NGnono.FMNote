<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;
using EFTracingProvider;
using EFProviderWrapperToolkit;
using NGnono.Framework.Data.EF;
using <#= code.EscapeNamespace(efHost.MappingNamespace) #>;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
	    private static readonly NGnono.Framework.Logger.ILog _log;

        static <#= efHost.EntityContainer.Name #>()
        {
            Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
			_log = NGnono.Framework.ServiceLocation.ServiceLocator.Current.Resolve<NGnono.Framework.Logger.ILog>();
        }

		/// <summary>
        /// product ,no tracing
        /// </summary>
        public <#= efHost.EntityContainer.Name #>()
            : this("Name=<#= efHost.EntityContainer.Name #>" , true)
        {
        }

		/// <summary>
        /// product ,no tracing
        /// </summary>
        /// <param name="nameOrConnectionString"></param>
        /// <param name="product"></param>
        public <#= efHost.EntityContainer.Name #>(string nameOrConnectionString, bool product)
            : base(nameOrConnectionString)
        {
        }

		#region ef tracing

        public <#= efHost.EntityContainer.Name #>(string nameOrConnectionString)
            : base(NGnono.Framework.Data.EF.EFTracingUtil.GetConnection(nameOrConnectionString), true)
        {
			var ctx = ((IObjectContextAdapter)this).ObjectContext;

            this.ObjectContext = ctx;

            EFTracingConnection tracingConnection;
            if (ObjectContext.TryUnwrapConnection(out tracingConnection))
            {
                ctx.GetTracingConnection().CommandExecuting += (s, e) => _log.Debug(e.ToTraceString());
            }
        }

        #endregion

		#region Tracing Extensions

        private ObjectContext ObjectContext { get; set; }

        private EFTracingConnection TracingConnection
        {
            get { return ObjectContext.UnwrapConnection<EFTracingConnection>(); }
        }

        public event EventHandler<CommandExecutionEventArgs> CommandExecuting
        {
            add { this.TracingConnection.CommandExecuting += value; }
            remove { this.TracingConnection.CommandExecuting -= value; }
        }

        public event EventHandler<CommandExecutionEventArgs> CommandFinished
        {
            add { this.TracingConnection.CommandFinished += value; }
            remove { this.TracingConnection.CommandFinished -= value; }
        }

        public event EventHandler<CommandExecutionEventArgs> CommandFailed
        {
            add { this.TracingConnection.CommandFailed += value; }
            remove { this.TracingConnection.CommandFailed -= value; }
        }

        #endregion


<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
        public DbSet<<#= set.ElementType.Name #>Entity> <#= set.Name #>Entity { get; set; }
<#
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
		            // modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(new <#= set.ElementType.Name #>EntityMap());
<#
    }
#>
        }
    }

	#region IEFUnitOfWork

	public interface I<#= efHost.EntityContainer.Name #>EFUnitOfWork : IUnitOfWork
	{
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
		/// <summary>
        /// <#= set.ElementType.Name #>
        /// </summary>
        EFRepository<<#= set.ElementType.Name #>Entity, int> <#= set.ElementType.Name #>Repository { get; }

<#
    }
#>
	}

	#endregion

	#region unitOfWork

	public class <#= efHost.EntityContainer.Name #>UnitOfWork : EFUnitOfWork , I<#= efHost.EntityContainer.Name #>EFUnitOfWork
    {
		#region fields

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
	    var fieldName = "_"+set.ElementType.Name[0].ToString(CultureInfo.InvariantCulture).ToLower() + set.ElementType.Name.Substring(1, set.ElementType.Name.Length - 1)+"Repository";
#>
		/// <summary>
        /// <#= set.ElementType.Name #>Entity _<#= set.ElementType.Name[0].ToString(CultureInfo.InvariantCulture).ToLower() + set.ElementType.Name.Substring(1, set.ElementType.Name.Length - 1) #>Repository;
        /// </summary>
        private EFRepository<<#= set.ElementType.Name #>Entity, int> <#=fieldName #>;

<#
    }
#>
		#endregion

	    #region .ctor
	    
        public <#= efHost.EntityContainer.Name #>UnitOfWork(DbContext dbContext) : base(dbContext)
        {
        }

		#endregion

        #region porperties

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
	    var fieldName = "_"+set.ElementType.Name[0].ToString(CultureInfo.InvariantCulture).ToLower() + set.ElementType.Name.Substring(1, set.ElementType.Name.Length - 1)+"Repository";
#>
		/// <summary>
        /// <#= set.ElementType.Name #>Entity
        /// </summary>
        public EFRepository<<#= set.ElementType.Name #>Entity, int> <#= set.ElementType.Name #>Repository { get { return <#=fieldName #> ?? ( <#=fieldName #> = new EFRepository<<#= set.ElementType.Name #>Entity, int>(DbContext)); } }

<#
    }
#>
        #endregion
    }

	#endregion


	#region mvc modelbinder

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
	    var classPreName = set.ElementType.Name;
		var entityName = classPreName + "Entity";
		var titleClassName = "_" + classPreName.ToString(CultureInfo.InvariantCulture).ToLower() + classPreName.Substring(1, classPreName.Length - 1);
#>
    #region <#= classPreName #>ModelBinder
    
	public class <#= classPreName #>ModelBinder : ModelBinderBase
    {
        private readonly IRepository<<#= entityName #>, int> <#= titleClassName #>;

        public <#= classPreName #>ModelBinder(IRepository<<#= entityName #>, int> service)
        {
            <#= titleClassName #> = service;
        }

        #region Overrides of ModelBinderBase

        /// <summary>
        /// 根据模型标识获取模型实例
        /// </summary>
        /// <param name="modelId">
        /// 模型标识
        /// </param>
        /// <returns>
        /// 模型实例
        /// </returns>
        protected override object GetModelInstance(string modelId)
        {
            return <#= titleClassName #>.GetItem(Int32.Parse(modelId));
        }

        #endregion
    }

    public class Fetch<#= classPreName #>Attribute : UseBinderAttribute
    {
        public Fetch<#= classPreName #>Attribute()
            : base(typeof(<#= classPreName #>ModelBinder))
        {
        }
    }

	#endregion

<#
    }
#>

	#endregion
}
